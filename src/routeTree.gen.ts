/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as NotesIndexImport } from './routes/notes/index'
import { Route as CalendarIndexImport } from './routes/calendar/index'

// Create/Update Routes

const TasksIndexRoute = TasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const NotesIndexRoute = NotesIndexImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => rootRoute,
} as any)

const CalendarIndexRoute = CalendarIndexImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/calendar/': {
      id: '/calendar/'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarIndexImport
      parentRoute: typeof rootRoute
    }
    '/notes/': {
      id: '/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/calendar': typeof CalendarIndexRoute
  '/notes': typeof NotesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/tasks': typeof TasksIndexRoute
}

export interface FileRoutesByTo {
  '/calendar': typeof CalendarIndexRoute
  '/notes': typeof NotesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/tasks': typeof TasksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/calendar/': typeof CalendarIndexRoute
  '/notes/': typeof NotesIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/tasks/': typeof TasksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/calendar' | '/notes' | '/settings' | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to: '/calendar' | '/notes' | '/settings' | '/tasks'
  id: '__root__' | '/calendar/' | '/notes/' | '/settings/' | '/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  CalendarIndexRoute: typeof CalendarIndexRoute
  NotesIndexRoute: typeof NotesIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  CalendarIndexRoute: CalendarIndexRoute,
  NotesIndexRoute: NotesIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/calendar/",
        "/notes/",
        "/settings/",
        "/tasks/"
      ]
    },
    "/calendar/": {
      "filePath": "calendar/index.tsx"
    },
    "/notes/": {
      "filePath": "notes/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
